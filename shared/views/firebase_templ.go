// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package shared

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func FirebaseInit() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script type=\"module\">\r\n        import { initializeApp } from \"https://www.gstatic.com/firebasejs/11.0.2/firebase-app.js\";\r\n\r\n        // Add Firebase products that you want to use\r\n        import {\r\n          getAuth,\r\n          onAuthStateChanged,\r\n        } from \"https://www.gstatic.com/firebasejs/11.0.2/firebase-auth.js\";\r\n\r\n        // 1. Firebase 초기화\r\n        const firebaseConfig = {\r\n          apiKey: \"AIzaSyCWIebyvcBiwWchfYGUegHf22c9nlBEOWQ\",\r\n          authDomain: \"warm-braid-383411.firebaseapp.com\",\r\n          projectId: \"warm-braid-383411\",\r\n          storageBucket: \"warm-braid-383411.firebasestorage.app\",\r\n          messagingSenderId: \"1001293129594\",\r\n          appId: \"1:1001293129594:web:a579e07714a18ec3b598c3\"\r\n        };\r\n        const app = initializeApp(firebaseConfig);\r\n        const auth = getAuth(app);\r\n\r\n        // 2. 토큰을 저장할 변수와 Promise\r\n        //    - authPromise는 \"토큰이 준비되기를 기다리는\" Promise\r\n        let authToken = null;\r\n        let authPromise = null;\r\n\r\n        // 3. onAuthStateChanged로 로그인/로그아웃 감지\r\n        onAuthStateChanged(auth, (user) => {\r\n          if (user) {\r\n            console.log(\"로그인됨:\", user);\r\n            document.getElementById(\"username\").textContent = user.displayName;\r\n            document.getElementById(\"login\").classList.add(\"is-hidden\");\r\n            document.getElementById(\"logout\").classList.remove(\"is-hidden\");\r\n\r\n            // user가 존재하면, 토큰 가져오는 Promise를 만들어 둠\r\n            authPromise = user\r\n              .getIdToken(/* forceRefresh */ false)\r\n              .then((token) => {\r\n                authToken = token; // 이후 htmx 요청 때 이 token을 쓰면 됨\r\n                return token;\r\n              })\r\n              .catch((err) => {\r\n                console.error(\"토큰 가져오기 실패:\", err);\r\n                throw err;\r\n              });\r\n          } else {\r\n            // 로그아웃 상태\r\n            console.log(\"로그아웃 상태\");\r\n            document.getElementById(\"username\").textContent = \"\";\r\n            document.getElementById(\"login\").classList.remove(\"is-hidden\");\r\n            document.getElementById(\"logout\").classList.add(\"is-hidden\");\r\n\r\n            // token/Promise 초기화\r\n            authToken = null;\r\n            authPromise = null;\r\n          }\r\n        });\r\n\r\n        /*\r\n            4. htmx:confirm 이벤트:\r\n               - HTMX가 요청을 보내기 직전(사용자 액션)에 발생하며,\r\n                 요청을 계속할지(확인) 여부를 결정.\r\n               - 여기서 \"토큰이 아직 준비되지 않았다면\" 요청을 잠시 중단했다가,\r\n                 토큰이 준비된 뒤에 issueRequest()로 재개.\r\n          */\r\n        htmx.on(\"htmx:confirm\", (e) => {\r\n          // authPromise가 없거나, 아직 user가 null이면\r\n          if (!authPromise) {\r\n            console.warn(\"아직 로그인 안 됐으므로 HTMX 요청 중단\");\r\n            e.preventDefault();\r\n            return;\r\n          }\r\n\r\n          // authPromise가 완료될 때까지 대기\r\n          // (이 시점에서 토큰이 준비됨)\r\n          if (authToken === null) {\r\n            // 이미 Promise는 존재하지만, 토큰이 아직 안 왔을 수도 있으니\r\n            e.preventDefault();\r\n            authPromise.then(() => {\r\n              console.log(\"토큰이 준비되었으므로 요청 재개\");\r\n              e.detail.issueRequest(); // 다시 요청을 보냄\r\n            });\r\n          }\r\n        });\r\n\r\n        /*\r\n            5. htmx:configRequest 이벤트:\r\n               - 실제로 요청을 구성할 때 발생\r\n               - 여기에 \"Authorization: Bearer <토큰>\" 헤더를 추가\r\n          */\r\n        htmx.on(\"htmx:configRequest\", (e) => {\r\n          // 토큰이 있다면 헤더에 실어 보냄\r\n          if (authToken) {\r\n            e.detail.headers[\"Authorization\"] = \"Bearer \" + authToken;\r\n          }\r\n        });\r\n\r\n        document.getElementById(\"logout\").addEventListener(\"click\", () => {\r\n          auth.signOut();\r\n        });\r\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
